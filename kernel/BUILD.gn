declare_args() {
  mds_log_build_level = "MDS_LOG_LEVEL_INFO"

  mds_kernel_interrupt_irq_nums = 0
  mds_kernel_object_name_size = 7
  mds_kernel_use_assert = false
  mds_kernel_lib_miniable = false

  mds_kernel_core_arch = ""
  mds_kernel_core_backtrace = true
  mds_kernel_hook_enable = false
  mds_kernel_memheap_stats = false
  mds_kernel_systick_freq_hz = 1000

  mds_kernel_with_sys = true
  mds_kernel_thread_priority_nums = 32
  mds_kernel_thread_idle_hook_size = 0
  mds_kernel_thread_idle_stack_size = 384
  mds_kernel_thread_idle_ticks = 32
  mds_kernel_thread_timer_enable = false
  mds_kernel_thread_timer_stack_size = 256
  mds_kernel_thread_timer_priority = 0
  mds_kernel_thread_timer_ticks = 16
}

config("mds_kernel_config") {
  include_dirs = [ "inc/" ]

  defines = [ "MDS_LOG_BUILD_LEVEL=${mds_log_build_level}" ]

  if (defined(mds_kernel_object_name_size)) {
    assert(mds_kernel_object_name_size > 0)
    defines += [ "MDS_OBJECT_NAME_SIZE=${mds_kernel_object_name_size}" ]
  }

  if (defined(mds_kernel_use_assert) && mds_kernel_use_assert) {
    defines += [ "MDS_USE_ASSERT=1" ]
  }

  if (defined(mds_kernel_memheap_stats) && mds_kernel_memheap_stats) {
    defines += [ "MDS_MEMHEAP_STATS=1" ]
  }

  if (defined(mds_kernel_hook_enable) && mds_kernel_hook_enable) {
    defines += [ "MDS_HOOK_ENABLE=1" ]
  }

  if (defined(mds_kernel_systick_freq_hz)) {
    defines += [ "MDS_SYSTICK_FREQ_HZ=${mds_kernel_systick_freq_hz}" ]
  }

  if (defined(mds_kernel_with_sys) && mds_kernel_with_sys) {
    assert(mds_kernel_thread_priority_nums > 0)
    defines += [ "MDS_THREAD_PRIORITY_NUMS=${mds_kernel_thread_priority_nums}" ]
  } else {
    defines += [ "MDS_THREAD_PRIORITY_NUMS=0" ]
  }
}

source_set("mds_kernel") {
  sources = [
    "src/device.c",
    "src/library.c",
    "src/locale.c",
    "src/log.c",
    "src/mem/llff.c",
    "src/mem/memory.c",
    "src/object.c",
  ]

  defines = [ "MDS_INTERRUPT_IRQ_NUMS=${mds_kernel_interrupt_irq_nums}" ]

  if (defined(mds_kernel_lib_miniable) && mds_kernel_lib_miniable) {
    defines += [ "MDS_LIB_MINIABLE=1" ]
  }

  if (mds_kernel_core_arch != "") {
    sources += [ "src/arch/" + mds_kernel_core_arch + ".c" ]

    if (defined(mds_kernel_core_backtrace) && mds_kernel_core_backtrace) {
      defines += [ "MDS_CORE_BACKTRACE=1" ]
    }

    if (mds_kernel_with_sys) {
      sources += [
        "src/sys/idle.c",
        "src/sys/ipc.c",
        "src/sys/kernel.c",
        "src/sys/scheduler.c",
        "src/sys/thread.c",
        "src/sys/tick.c",
        "src/sys/timer.c",
      ]

      assert(mds_kernel_thread_idle_stack_size > 0)
      assert(mds_kernel_thread_idle_ticks > 0)
      defines += [
        "MDS_THREAD_IDLE_HOOK_SIZE=${mds_kernel_thread_idle_hook_size}",
        "MDS_THREAD_IDLE_STACKSIZE=${mds_kernel_thread_idle_stack_size}",
        "MDS_THREAD_IDLE_TICKS=${mds_kernel_thread_idle_ticks}",
      ]

      if (mds_kernel_thread_timer_enable) {
        assert(mds_kernel_thread_timer_stack_size > 0)
        assert(mds_kernel_thread_timer_ticks > 0)
        defines += [
          "MDS_THREAD_TIMER_ENABLE=1",
          "MDS_THREAD_TIMER_STACKSIZE=${mds_kernel_thread_timer_stack_size}",
          "MDS_THREAD_TIMER_PRIORITY=${mds_kernel_thread_timer_priority}",
          "MDS_THREAD_TIMER_TICKS=${mds_kernel_thread_timer_ticks}",
        ]
      }
    } else {
      sources += [ "src/nosys.c" ]
    }
  }

  public_configs = [ ":mds_kernel_config" ]
}
